schema {
  query: Query
  mutation: Mutation
}

type Query {
  calculations: [AlgebraCalculation!]!
}

type Mutation {
  submitCalculation(expression: String!): AlgebraCalculation!
  executeGap(input: ExecuteGapInput!): GapResult!
}

input ExecuteGapInput {
  code: String!
}

type GapResult {
  output: String!
  error: String!
}

type AlgebraCalculation {
  id: UUID!
  type: CalculationType!
  createdAt: DateTime!
  input: CalculationInput!
  output: CalculationOutput
}

type CalculationInput {
  fields: [KeyValuePairOfStringAndObject!]!
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

enum CalculationType {
  NONE
  UNKNOWN
  ALGEBRA
  ARITHMATIC
  LINEAR
  SYMBOLIC
}

scalar UUID

type CalculationOutput {
  fields: [KeyValuePairOfStringAndObject!]!
  steps: [String!]
  graphUrl: String
  errorMessage: String
}

type KeyValuePairOfStringAndObject {
  key: String!
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION